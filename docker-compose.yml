version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: codelog-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${DB_NAME:-codelog}
      MYSQL_USER: ${DB_USER:-codelog}
      MYSQL_PASSWORD: ${DB_PASSWORD:-codelogpassword}
    volumes:
      - mysql-data:/var/lib/mysql
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "3307:3306"
    networks:
      - codelog-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: codelog-backend
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USER: ${DB_USER:-codelog}
      DB_PASSWORD: ${DB_PASSWORD:-codelogpassword}
      DB_NAME: ${DB_NAME:-codelog}
      JWT_SECRET: ${JWT_SECRET:-change-this-secret-in-production}
      JWT_EXPIRES_IN: 7d
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost}
      # Android Build Environment Variables
      JAVA_HOME: /usr/lib/jvm/java-17-openjdk
      ANDROID_HOME: /android-sdk
      ANDROID_SDK_ROOT: /android-sdk
      GRADLE_HOME: /opt/gradle/gradle-8.4
    volumes:
      - uploads-data:/app/uploads
      - builds-data:/app/android-builds
      # Mount Android SDK and Gradle from host (after running setup script)
      - ${HOME}/android-sdk:/android-sdk
      - /opt/gradle:/opt/gradle:ro
    ports:
      - "5000:5000"
    networks:
      - codelog-network
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Nginx)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: codelog-frontend
    ports:
      - "80:80"
    networks:
      - codelog-network
    depends_on:
      - backend
    restart: unless-stopped

networks:
  codelog-network:
    driver: bridge

volumes:
  mysql-data:
  uploads-data:
  builds-data:
