================================================================================
CodeLog - APK 파싱 에러 수정 완료
================================================================================

📅 작성일: 2025-10-13
🐛 문제: "패키지를 파싱하는 중 문제가 발생하였습니다"
✅ 상태: 수정 완료

================================================================================
1. 문제 상황
================================================================================

1.1. 보고된 에러
--------------
증상:
- 안드로이드 폰에서 APK 설치 시 에러 발생
- "패키지를 파싱하는 중 문제가 발생하였습니다"
- 앱이 설치되지 않음

발생 원인:
- 이전 빌드 시스템이 실제 APK 대신 "데모 APK" 생성
- 데모 APK는 단순 텍스트 파일 (실제 APK가 아님)
- Android가 파일을 APK로 인식할 수 없음

1.2. 근본 원인
--------------
파일: backend/src/services/androidBuilderCapacitor.js

문제 코드 (이전):
```javascript
} catch (error) {
    log('Build error: ' + error.message);
    // Create a dummy APK for demo purposes if build fails
    log('Creating demo APK for testing...');
    const demoApkPath = path.join(buildDir, 'app-demo.apk');
    await fs.writeFile(demoApkPath, 'Demo APK - Install Gradle and Android SDK for real builds');
    return demoApkPath;  // ← 텍스트 파일을 APK로 반환!
}
```

왜 이런 코드가 있었나?
- 서버에 빌드 도구가 없어도 "빌드 완료"로 표시되도록 임시 처리
- 개발 중 테스트 목적
- 하지만 실제로는 설치 불가능한 파일

================================================================================
2. 수정 내용
================================================================================

2.1. 데모 APK 생성 제거 ✅
--------------
변경 사항:
- 빌드 실패 시 데모 파일 생성 코드 완전 제거
- 빌드 실패 시 명확한 에러 메시지 반환
- 사용자가 빌드 실패 원인을 알 수 있도록 개선

수정 후:
```javascript
} catch (error) {
    log('Build error: ' + error.message);
    log('Full error: ' + error.stack);
    throw new Error('APK build failed: ' + error.message +
      '\n\nPlease ensure Android SDK, Gradle, and JDK are properly installed on the server.');
}
```

2.2. APK 유효성 검증 추가 ✅
--------------
새로운 검증:
- APK 파일 크기 확인 (100KB 이상)
- 파일이 실제로 생성되었는지 확인
- 빌드 로그 상세 기록

검증 코드:
```javascript
// Verify APK is valid (check file size)
const stats = await fs.stat(finalApkPath);
if (stats.size < 1024 * 100) { // Less than 100KB is suspicious
  throw new Error(`APK file is too small (${stats.size} bytes). Build may have failed.`);
}

log(`APK built successfully: ${finalApkPath} (${Math.round(stats.size / 1024 / 1024 * 10) / 10}MB)`);
```

2.3. 빌드 환경 사전 검증 ✅
--------------
새 함수: validateBuildEnvironment()

빌드 전에 확인:
- ✓ Node.js 설치 여부
- ✓ npm 설치 여부
- ✓ Java JDK 설치 여부
- ✓ ANDROID_HOME 환경 변수 설정
- ✓ Android SDK 디렉토리 존재 여부
- ⚠ Gradle 설치 여부 (선택사항)

검증 실패 시:
- 명확한 에러 메시지 표시
- 어떤 도구가 없는지 알려줌
- 설치 가이드 문서 참조 안내

예시 에러 메시지:
```
Build environment validation failed:
  - Java JDK is not installed or not in PATH. JDK 17 or higher is required.
  - ANDROID_HOME or ANDROID_SDK_ROOT environment variable is not set

Please refer to Android_빌드_설정_가이드.txt for installation instructions.
```

2.4. Gradlew 실행 권한 수정 ✅
--------------
Unix/Linux에서 gradlew 실행 권한 자동 부여:
```javascript
// Make gradlew executable (Unix)
if (!isWindows) {
  await execAsync(`chmod +x "${gradlewPath}"`);
  log('Made gradlew executable');
}
```

2.5. 빌드 로그 개선 ✅
--------------
- 더 상세한 Gradle 출력 (마지막 1000자)
- 빌드 파일 크기 표시
- 각 단계별 상태 표시
- 에러 스택 트레이스 기록

================================================================================
3. 이제 빌드가 작동하는 방식
================================================================================

3.1. 빌드 프로세스 (개선됨)
--------------
1. 빌드 요청 수신
   └─ 프론트엔드에서 "APK 빌드" 클릭

2. 환경 검증 ⭐ 새로 추가!
   └─ validateBuildEnvironment() 실행
   └─ Node.js, Java, Android SDK 확인
   └─ 실패 시 즉시 중단 및 에러 표시

3. 빌드 디렉토리 생성
   └─ android-builds/build-[ID]

4. 웹 앱 생성
   └─ index.html, style.css, app.js
   └─ 아이콘, 스플래시 이미지 복사

5. Capacitor 초기화
   └─ package.json 생성
   └─ npm install (의존성 설치)
   └─ capacitor.config.json 생성

6. Android 플랫폼 추가
   └─ npx cap add android

7. 웹 자산 동기화
   └─ npx cap sync android

8. APK 빌드 ⭐ 개선!
   └─ Gradlew 존재 확인
   └─ Gradlew 실행 권한 부여
   └─ ./gradlew assembleRelease --no-daemon
   └─ APK 파일 생성 확인
   └─ 파일 크기 검증 (100KB 이상)
   └─ 성공!

9. 빌드 파일 저장
   └─ android-builds/[AppName]_[BuildId].apk

10. DB 업데이트
    └─ 빌드 상태: success
    └─ 빌드 로그 저장
    └─ 파일 경로 저장

3.2. 실패 시 동작 (개선됨)
--------------
이전:
- 빌드 실패 → 데모 APK 생성 → "성공"으로 표시 → 설치 실패

현재:
- 환경 검증 실패 → 즉시 중단 → 명확한 에러 메시지
- 빌드 실패 → 즉시 중단 → 상세한 에러 로그
- 사용자에게 무엇을 해야 하는지 안내

================================================================================
4. 서버 설정 (필수!)
================================================================================

⚠️ 중요: 실제 APK를 빌드하려면 EC2 서버에 다음 도구들이 설치되어야 합니다!

4.1. 필수 설치 항목
--------------
□ Java JDK 17+
□ Android SDK
□ Node.js 18+
□ npm

4.2. 환경 변수 설정
--------------
□ JAVA_HOME
□ ANDROID_HOME (또는 ANDROID_SDK_ROOT)
□ PATH에 필요한 경로 추가

4.3. 빠른 설치 스크립트 (Ubuntu)
--------------
전체 설치 스크립트는 "Android_빌드_설정_가이드.txt" 참조

핵심 명령어:
```bash
# JDK 17 설치
sudo apt update
sudo apt install -y openjdk-17-jdk

# Android SDK 설치
cd ~
wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
mkdir -p ~/android-sdk/cmdline-tools
unzip commandlinetools-linux-9477386_latest.zip -d ~/android-sdk/cmdline-tools
mv ~/android-sdk/cmdline-tools/cmdline-tools ~/android-sdk/cmdline-tools/latest

# 환경 변수 설정
cat >> ~/.bashrc << 'EOF'
export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
export ANDROID_HOME=~/android-sdk
export ANDROID_SDK_ROOT=$ANDROID_HOME
export PATH=$JAVA_HOME/bin:$PATH
export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$PATH
export PATH=$ANDROID_HOME/platform-tools:$PATH
EOF

source ~/.bashrc

# Android SDK 패키지 설치
sdkmanager --update
sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"
yes | sdkmanager --licenses

# 확인
java --version
sdkmanager --list_installed
```

설치 시간: 약 30-60분
디스크 공간: 약 3-4GB

================================================================================
5. 재배포 방법
================================================================================

5.1. 코드 업데이트 (Git)
--------------
# 로컬 (Windows PowerShell)
cd D:\CodeLog
git add .
git commit -m "Fix: Remove demo APK, add build validation"
git push origin main

# EC2 서버
ssh -i C:\keys\codelog-keypair.pem ubuntu@YOUR_EC2_IP

cd ~/CodeLog
git pull origin main

# 백엔드 의존성 업데이트
cd backend
npm install

# Docker 재시작
cd ~/CodeLog
docker compose down
docker compose up -d --build

5.2. 빌드 환경 설정 (한 번만)
--------------
위 섹션 4.3의 설치 스크립트 실행

또는 상세 가이드 참조:
- Android_빌드_설정_가이드.txt

5.3. 환경 설정 확인
--------------
# EC2 서버에서 확인
java --version
# 출력: openjdk 17.0.x ...

echo $ANDROID_HOME
# 출력: /home/ubuntu/android-sdk

echo $JAVA_HOME
# 출력: /usr/lib/jvm/java-17-openjdk-amd64

sdkmanager --list_installed
# 출력: 설치된 SDK 목록

================================================================================
6. 테스트 방법
================================================================================

6.1. 첫 번째 빌드 테스트
--------------
1. 브라우저에서 http://YOUR_EC2_IP 접속

2. 로그인

3. 새 프로젝트 생성
   - 앱 이름: TestApp
   - 패키지 이름: com.test.app
   - 웹사이트 URL: https://www.google.com
   - 빌드 타입: URL

4. "빌드" 탭으로 이동

5. "APK 빌드" 클릭

6. 빌드 로그 확인
   - 환경 검증 통과 확인
   - Capacitor 초기화 확인
   - Gradle 빌드 진행 확인
   - "APK built successfully" 확인

7. 빌드 완료 대기 (5-10분)

8. "다운로드" 버튼 클릭

9. APK 파일 다운로드 확인
   - 파일 크기: 최소 5MB 이상
   - 파일명: TestApp_1.0.0.apk

10. 안드로이드 폰에 설치 테스트

6.2. 빌드 실패 시 확인사항
--------------
# EC2 서버에서 로그 확인
docker compose logs -f backend

# 빌드 로그 확인 (데이터베이스)
docker exec -it codelog-mysql mysql -u codelog -p
USE codelog;
SELECT id, build_status, build_log FROM builds ORDER BY created_at DESC LIMIT 1;

# 환경 변수 확인
ssh -i KEY ubuntu@IP
env | grep -E 'JAVA|ANDROID|PATH'

6.3. 성공적인 빌드 로그 예시
--------------
[2025-10-13T12:00:00.000Z] Starting Capacitor-based Android build process...
[2025-10-13T12:00:01.000Z] Checking build environment...
[2025-10-13T12:00:01.100Z] ✓ Node.js: v18.17.0
[2025-10-13T12:00:01.200Z] ✓ npm: 9.8.1
[2025-10-13T12:00:01.300Z] ✓ Java: openjdk 17.0.8 2023-07-18
[2025-10-13T12:00:01.400Z] ✓ ANDROID_HOME: /home/ubuntu/android-sdk
[2025-10-13T12:00:01.500Z] ✓ Android SDK directory exists
[2025-10-13T12:00:01.600Z] ✓ Build environment validation passed
[2025-10-13T12:00:02.000Z] Build directory created: /app/android-builds/build-1
[2025-10-13T12:00:03.000Z] Creating web app structure...
[2025-10-13T12:00:04.000Z] index.html created
...
[2025-10-13T12:08:45.000Z] Gradle output: BUILD SUCCESSFUL in 8m 30s
[2025-10-13T12:08:46.000Z] Found unsigned APK: .../app-release-unsigned.apk
[2025-10-13T12:08:47.000Z] APK built successfully: .../app-release-unsigned.apk (8.5MB)
[2025-10-13T12:08:48.000Z] Build completed successfully!

================================================================================
7. 자주 발생하는 에러와 해결
================================================================================

7.1. "Build environment validation failed: Java JDK is not installed"
--------------
원인: Java가 설치되지 않았거나 PATH에 없음

해결:
sudo apt install -y openjdk-17-jdk
echo 'export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64' >> ~/.bashrc
echo 'export PATH=$JAVA_HOME/bin:$PATH' >> ~/.bashrc
source ~/.bashrc
java --version

7.2. "ANDROID_HOME or ANDROID_SDK_ROOT environment variable is not set"
--------------
원인: 환경 변수가 설정되지 않음

해결:
echo 'export ANDROID_HOME=~/android-sdk' >> ~/.bashrc
echo 'export ANDROID_SDK_ROOT=$ANDROID_HOME' >> ~/.bashrc
source ~/.bashrc
echo $ANDROID_HOME

7.3. "Gradle wrapper not found"
--------------
원인: Capacitor 초기화 실패

해결:
- npm install이 실패했을 가능성
- 빌드 로그 확인
- 디스크 공간 확인: df -h
- 메모리 확인: free -h

7.4. "APK file is too small (XXX bytes)"
--------------
원인: Gradle 빌드가 실패했지만 파일은 생성됨

해결:
- 빌드 로그에서 Gradle 에러 확인
- Android SDK 패키지가 모두 설치되었는지 확인
- sdkmanager --list_installed

7.5. 여전히 "패키지를 파싱하는 중 문제가 발생" 에러
--------------
원인 1: 빌드 도구가 제대로 설치되지 않음
해결: 섹션 4.3의 설치 스크립트 다시 실행

원인 2: APK가 손상됨
해결: 다시 빌드

원인 3: Android 버전 호환성
해결: Android 5.0 (API 21) 이상 필요

원인 4: 앱이 이미 설치되어 있음 (다른 서명)
해결: 기존 앱 삭제 후 재설치

================================================================================
8. 수정된 파일 목록
================================================================================

✅ 수정된 파일:
1. backend/src/services/androidBuilderCapacitor.js
   - validateBuildEnvironment() 함수 추가 (라인 17-77)
   - buildAPK() 함수 개선 (라인 243-310)
   - buildAAB() 함수 개선 (라인 312-368)
   - 데모 APK 생성 코드 제거
   - APK 유효성 검증 추가

📄 생성된 파일:
1. APK_파싱_에러_수정.txt (이 파일)
   - 에러 분석 및 수정 내용
   - 재배포 및 테스트 방법

================================================================================
9. 비교: 이전 vs 현재
================================================================================

┌────────────────────────┬──────────────────┬──────────────────┐
│ 항목                   │ 이전             │ 현재             │
├────────────────────────┼──────────────────┼──────────────────┤
│ 빌드 실패 시           │ 데모 APK 생성    │ 명확한 에러 표시 │
│ 환경 검증              │ 없음             │ 사전 검증        │
│ APK 유효성 확인        │ 없음             │ 파일 크기 확인   │
│ 에러 메시지            │ 불명확           │ 상세함           │
│ 빌드 로그              │ 제한적           │ 매우 상세함      │
│ 설치 가능 여부         │ ❌ 불가능        │ ✅ 가능          │
│ 사용자 경험            │ 혼란스러움       │ 명확함           │
│ 디버깅                 │ 어려움           │ 쉬움             │
└────────────────────────┴──────────────────┴──────────────────┘

================================================================================
10. 다음 단계
================================================================================

✅ 완료된 작업:
1. 데모 APK 생성 코드 제거
2. 빌드 환경 사전 검증 추가
3. APK 유효성 검사 추가
4. 상세한 에러 메시지 추가
5. 빌드 로그 개선

🚀 해야 할 일:
1. EC2 서버에 빌드 도구 설치 (섹션 4.3)
2. 환경 변수 설정 확인 (섹션 5.3)
3. 코드 재배포 (섹션 5.1)
4. Docker 컨테이너 재시작
5. 테스트 빌드 실행 (섹션 6.1)

📋 체크리스트:
□ JDK 17 설치
□ Android SDK 설치
□ 환경 변수 설정 (JAVA_HOME, ANDROID_HOME)
□ PATH 업데이트
□ sdkmanager로 SDK 패키지 설치
□ 라이선스 동의 (sdkmanager --licenses)
□ 코드 pull 및 Docker 재시작
□ 테스트 빌드 실행
□ APK 다운로드 및 설치 테스트

================================================================================
요약
================================================================================

✅ 문제: "패키지를 파싱하는 중 문제" 에러
✅ 원인: 데모 APK (텍스트 파일) 생성
✅ 해결: 실제 APK만 생성하도록 수정
✅ 개선: 빌드 환경 검증, APK 유효성 확인 추가
✅ 필수: EC2 서버에 빌드 도구 설치 필요

⚠️ 중요: 코드 수정만으로는 부족합니다!
   서버에 JDK, Android SDK 등을 설치해야 실제 APK 빌드가 가능합니다.

📚 참조: Android_빌드_설정_가이드.txt

================================================================================
마지막 업데이트: 2025-10-13
작성자: Claude Code
버전: 2.1
================================================================================
