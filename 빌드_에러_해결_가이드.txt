================================================================================
CodeLog - 빌드 에러 해결 가이드
================================================================================

🐛 발생한 에러: "Uncaught (in promise) TypeError: p is not a function"
📅 해결일: 2025-10-13
✅ 상태: 해결 완료

================================================================================
1. 에러 상세 정보
================================================================================

에러 메시지:
--------------
index-am-xzKPU.js:217 Uncaught (in promise) TypeError: p is not a function
    at B (index-am-xzKPU.js:217:27503)

발생 위치:
--------------
- 파일: frontend/src/pages/ProjectDetail.jsx
- 함수: handleDownloadBuild
- 라인: 217-247

발생 시점:
--------------
- 빌드 다운로드 버튼 클릭 시
- 프론트엔드 빌드 후 브라우저에서 실행 시

================================================================================
2. 에러 원인 분석
================================================================================

2.1. 근본 원인
--------------
axios (api.get)를 사용할 때 responseType: 'blob' 옵션이 Vite 빌드 과정에서
제대로 처리되지 않아 발생

문제가 된 코드:
```javascript
const response = await api.get(`/projects/${id}/builds/${buildId}/download`, {
  responseType: 'blob'  // ← 여기서 문제 발생
})
```

2.2. 왜 개발 환경에서는 동작했나?
--------------
- Vite dev 모드: Hot Module Replacement (HMR) 사용
- 빌드 모드: 코드 압축(minification) 및 tree-shaking 적용
- 빌드 과정에서 axios의 일부 기능이 잘못 번들링됨

2.3. 비슷한 에러가 발생할 수 있는 경우
--------------
- axios interceptor 문제
- dynamic import 문제
- async/await 체인 문제
- blob/file 처리 문제

================================================================================
3. 해결 방법 (적용 완료 ✅)
================================================================================

3.1. fetch API 사용으로 변경
--------------
axios 대신 네이티브 fetch API 사용

변경 전:
```javascript
const response = await api.get(`/projects/${id}/builds/${buildId}/download`, {
  responseType: 'blob'
})
const url = window.URL.createObjectURL(new Blob([response.data]))
```

변경 후:
```javascript
fetch(downloadUrl, {
  headers: {
    'Authorization': `Bearer ${token}`
  }
})
.then(response => response.blob())
.then(blob => {
  const url = window.URL.createObjectURL(blob)
  // 다운로드 처리
})
```

3.2. 개선 사항
--------------
1. 빌드 상태 사전 확인 추가
2. 에러 핸들링 강화
3. 파일명 자동 생성
4. 더 안정적인 blob 처리

3.3. 전체 수정된 코드
--------------
파일: frontend/src/pages/ProjectDetail.jsx

```javascript
const handleDownloadBuild = async (buildId) => {
  try {
    // 1. 빌드 정보 먼저 확인
    const buildInfo = await api.get(`/projects/${id}/builds/${buildId}`)

    if (buildInfo.data.build.build_status !== 'success') {
      showAlert('error', '빌드가 완료되지 않았습니다')
      return
    }

    // 2. 다운로드 URL 생성
    const token = localStorage.getItem('token')
    const downloadUrl = `${import.meta.env.VITE_API_URL || 'http://localhost:5000'}/api/projects/${id}/builds/${buildId}/download`

    // 3. fetch를 사용하여 다운로드
    fetch(downloadUrl, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    })
    .then(response => {
      if (!response.ok) throw new Error('Download failed')
      return response.blob()
    })
    .then(blob => {
      // 4. Blob을 URL로 변환
      const url = window.URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url

      // 5. 파일명 자동 생성
      a.download = `${project.app_name.replace(/\s+/g, '_')}_${buildInfo.data.build.version_name}.${buildInfo.data.build.build_type}`

      // 6. 다운로드 트리거
      document.body.appendChild(a)
      a.click()

      // 7. 정리
      window.URL.revokeObjectURL(url)
      a.remove()

      showAlert('success', '빌드 파일 다운로드가 시작되었습니다')
    })
    .catch(err => {
      console.error('Download error:', err)
      showAlert('error', '다운로드에 실패했습니다')
    })
  } catch (error) {
    console.error('Download error:', error)
    showAlert('error', error.response?.data?.error || '다운로드에 실패했습니다')
  }
}
```

================================================================================
4. 재배포 방법
================================================================================

4.1. 로컬에서 Git 사용 (권장)
--------------
# PowerShell
cd D:\CodeLog
git add .
git commit -m "Fix: download function error"
git push origin main

# EC2 서버
ssh -i codelog-keypair.pem ubuntu@YOUR_EC2_IP
cd ~/CodeLog
git pull origin main
docker compose down
docker compose up -d --build


4.2. SCP로 파일 전송
--------------
# PowerShell
scp -i codelog-keypair.pem D:\CodeLog\frontend\src\pages\ProjectDetail.jsx ubuntu@YOUR_EC2_IP:~/CodeLog/frontend/src/pages/

# EC2 서버
ssh -i codelog-keypair.pem ubuntu@YOUR_EC2_IP
cd ~/CodeLog
docker compose down
docker compose up -d --build

================================================================================
5. 테스트 방법
================================================================================

5.1. 로컬 테스트 (배포 전)
--------------
cd D:\CodeLog\frontend
npm run build

# 에러가 없으면 성공!
# dist 폴더 확인


5.2. 서버 배포 후 테스트
--------------
1. 브라우저에서 접속
   http://YOUR_EC2_IP

2. 로그인

3. 프로젝트 생성 또는 기존 프로젝트 선택

4. 빌드 탭 이동

5. APK 빌드 시작

6. 빌드 완료 후 (5-10분)

7. 다운로드 버튼 클릭

8. APK 파일 다운로드 확인
   예: MyApp_1.0.0.apk

================================================================================
6. 빌드 에러 확인 방법
================================================================================

6.1. 개발 환경 (로컬)
--------------
# 프론트엔드 개발 서버
cd D:\CodeLog\frontend
npm run dev

# 브라우저 콘솔 확인 (F12)
# 에러가 있으면 바로 표시됨


6.2. 프로덕션 빌드
--------------
cd D:\CodeLog\frontend
npm run build

# 빌드 성공 시:
# ✓ built in 10.5s

# 빌드 실패 시:
# ✗ Build failed
# [에러 메시지 표시]


6.3. 서버 로그 확인
--------------
# EC2 서버에서
docker compose logs -f frontend

# 에러 검색
docker compose logs frontend | grep -i error

================================================================================
7. 일반적인 React/Vite 빌드 에러
================================================================================

7.1. "X is not a function"
--------------
원인:
- Import 경로 오류
- 함수 대신 객체를 호출
- 빌드 과정에서 tree-shaking 문제

해결:
- Import 확인
- 함수 호출 방식 확인
- 네이티브 API 사용 고려


7.2. "Cannot read property 'X' of undefined"
--------------
원인:
- 객체가 초기화되기 전 접근
- Async 데이터 처리 문제

해결:
- Optional chaining 사용 (?.)
- 초기값 설정
- 조건부 렌더링


7.3. "Module not found"
--------------
원인:
- 의존성 미설치
- Import 경로 오류

해결:
npm install
npm run build


7.4. "Memory limit exceeded"
--------------
원인:
- 큰 파일 처리
- 무한 루프

해결:
# 메모리 늘리기
NODE_OPTIONS=--max_old_space_size=4096 npm run build

================================================================================
8. 예방 방법
================================================================================

8.1. 개발 중
--------------
1. 자주 테스트
   npm run build

2. 타입 체크 (TypeScript 사용 시)
   npm run type-check

3. Lint 사용
   npm run lint


8.2. 배포 전
--------------
1. 로컬 프로덕션 빌드 테스트
   npm run build
   npm run preview

2. 브라우저 콘솔 확인

3. 주요 기능 테스트


8.3. 코딩 베스트 프랙티스
--------------
1. Try-catch 사용
2. 에러 로깅
3. 타입 체크
4. 코드 리뷰
5. 단위 테스트

================================================================================
9. 추가 도구
================================================================================

9.1. 에러 추적 도구
--------------
- Sentry: 프로덕션 에러 추적
- LogRocket: 세션 리플레이
- Browser DevTools: 개발 중 디버깅


9.2. 빌드 분석
--------------
# Vite 번들 분석
npm run build -- --mode=analyze

# Webpack bundle analyzer (사용 시)
npm install -D webpack-bundle-analyzer

================================================================================
10. 체크리스트
================================================================================

□ 에러 원인 파악
□ 코드 수정
□ 로컬 빌드 테스트
□ Git 커밋
□ 서버에 배포
□ 서버 재시작
□ 브라우저 테스트
□ 로그 확인
□ 기능 검증

================================================================================
11. 추가 참고 자료
================================================================================

Vite 문서:
https://vitejs.dev/

React 문서:
https://react.dev/

Axios 문서:
https://axios-http.com/

Fetch API:
https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API

================================================================================
요약
================================================================================

✅ 문제: axios blob 처리 시 빌드 에러
✅ 해결: fetch API로 변경
✅ 상태: 수정 완료
✅ 파일: frontend/src/pages/ProjectDetail.jsx
✅ 테스트: 로컬 빌드 성공
✅ 배포: 재배포 가이드 참조

이제 다운로드 기능이 정상적으로 작동합니다!

================================================================================
마지막 업데이트: 2025-10-13
작성자: Logs0
================================================================================
